# gestion/views/main_views.py

from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.views.decorators.cache import cache_control

from gestion.models import Utilisateur
from gestion.forms.utilisateur_forms import UtilisateurCreationForm, UtilisateurPublicRegistrationForm


def home(request):
    context = {
        'nom_entreprise': "Saint Jolie",
        'description': "Nous proposons des soins de qualit√© pour nos clients.",
        'photo': "img/entreprise.jpg",
    }
    return render(request, 'gestion/home.html', context)


def login_view(request):
    context = {
        'nom_entreprise': 'Saint Jolie',
        'email_saisi': '',
    }

    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('mot_de_passe')  # Assure-toi que le 'name' dans login.html est 'mot_de_passe'

        context['email_saisi'] = email

        # Correctement authentifier l'utilisateur
        user = authenticate(request, username=email, password=password)

        if user is not None:
            login(request, user)
            messages.success(request, "Connexion r√©ussie. Bienvenue chez Saint Jolie ! ‚ú®")
            return redirect('home')
        else:
            messages.error(request, "Adresse e-mail ou mot de passe incorrect.")

    return render(request, 'gestion/login.html', context)


"""
Ce d√©corateur envoie des en-t√™tes HTTP sp√©cifiques au navigateur, lui demandant de :
no_cache : Ne pas enregistrer cette page dans son cache.
no_store : Ne pas la stocker dans l'historique de session ou sur le disque.
must_revalidate : V√©rifier aupr√®s du serveur √† chaque fois qu'il tente de la charger.

"""


@cache_control(no_cache=True, must_revalidate=True, no_store=True)
def logout_view(request):
    logout(request)
    messages.info(request, "Vous avez √©t√© d√©connect√©. √Ä bient√¥t ! üëã")
    return redirect('home')


def apropos(request):
    context = {
        'nom_entreprise': "Saint Jolie",
        'description': "Nous sommes sp√©cialis√©s dans les soins esth√©tiques de qualit√©. <br> "
                       " Notre mission est de prendre soin de vous. <br>"
                       " Deux espaces de soins <br>"
                       " Notre institut comporte deux d√©partements: <br>"
                       "Le Quartier Bien-√™tre ax√©s sur l'hydroth√©rapie (baln√©oth√©rapie, watermass et douche "
                       "sous-affusion) <br>"
                       "Le Salon proposant les soins esth√©tiques classique li√©s √† la beaut√© du corps, du visage, "
                       "des ongles et du regard. <br>"
                       "Cat√©gories : √âcole d‚Äôesth√©tique <br>"
                       "Coordonn√©es <br>"
                       "Adresse: Rue Mazy 20, Jambes, Belgium, 5100 <br>"
                       "Mobile: 0493 52 52 84 ",
        'photo': "img/entreprise.jpg",
    }
    return render(request, 'gestion/apropos.html', context)


# Vue d'inscription des utilisateurs
def register_view(request):
    if request.method == 'POST':
        form = UtilisateurPublicRegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()  # L'utilisateur est cr√©√© mais pas encore connect√©

            # --- D√âBUT MODIFICATION ---
            login(request, user)  # Connecte l'utilisateur juste apr√®s la cr√©ation du compte
            messages.success(request, f"Bienvenue {user.first_name} ! Votre compte a √©t√© cr√©√© et vous √™tes connect√©. ‚ú®")
            return redirect('home')  # Redirige vers la page d'accueil
            # --- FIN MODIFICATION ---

        else:
            messages.error(request, "Veuillez corriger les erreurs ci-dessous.")
    else:
        form = UtilisateurPublicRegistrationForm()

    context = {
        'form': form,
        'nom_entreprise': 'Saint Jolie',
        'title': 'Cr√©er un compte',
    }
    return render(request, 'gestion/register.html', context)

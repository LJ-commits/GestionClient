# Generated by Django 5.2.3 on 2025-07-18 10:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Jour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('numero', models.PositiveIntegerField(choices=[(0, 'Lundi'), (1, 'Mardi'), (2, 'Mercredi'), (3, 'Jeudi'), (4, 'Vendredi'), (5, 'Samedi'), (6, 'Dimanche')], unique=True)),
            ],
            options={
                'ordering': ['numero'],
            },
        ),
        migrations.CreateModel(
            name='Soin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_de_soin', models.CharField(max_length=100)),
                ('duree', models.DurationField()),
            ],
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('date_de_naissance', models.DateField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Salon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('nombre_employes', models.PositiveIntegerField()),
                ('adresse', models.CharField(blank=True, max_length=255, null=True)),
                ('telephone', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('heure_ouverture', models.TimeField(blank=True, null=True)),
                ('heure_fermeture', models.TimeField(blank=True, null=True)),
                ('jours_ouverture', models.ManyToManyField(blank=True, related_name='salons_ouverts', to='gestion.jour')),
            ],
        ),
        migrations.CreateModel(
            name='JourSpecial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('heure_ouverture', models.TimeField(blank=True, null=True)),
                ('heure_fermeture', models.TimeField(blank=True, null=True)),
                ('est_ferme', models.BooleanField(default=False)),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jours_speciaux', to='gestion.salon')),
            ],
            options={
                'unique_together': {('salon', 'date')},
            },
        ),
        migrations.CreateModel(
            name='SoinSalonDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prix', models.DecimalField(decimal_places=2, max_digits=6)),
                ('commentaire_specifique', models.TextField(blank=True, verbose_name='Commentaire spécifique au salon')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.salon')),
                ('soin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.soin')),
            ],
            options={
                'unique_together': {('soin', 'salon')},
            },
        ),
        migrations.AddField(
            model_name='soin',
            name='salons',
            field=models.ManyToManyField(related_name='soins_offerts_details', through='gestion.SoinSalonDetail', to='gestion.salon'),
        ),
        migrations.CreateModel(
            name='RendezVous',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('heure_debut', models.TimeField()),
                ('heure_fin', models.TimeField()),
                ('statut', models.CharField(choices=[('prévu', 'Prévu'), ('terminé', 'Terminé'), ('annulé', 'Annulé')], max_length=20)),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.salon')),
                ('soin_detail', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.soinsalondetail', verbose_name='Soin Spécifique au Salon')),
            ],
        ),
        migrations.CreateModel(
            name='PlageHoraireSpeciale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heure_debut', models.TimeField()),
                ('heure_fin', models.TimeField()),
                ('jour_special', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plages_specifiques', to='gestion.jourspecial')),
            ],
            options={
                'unique_together': {('jour_special', 'heure_debut', 'heure_fin')},
            },
        ),
        migrations.CreateModel(
            name='PlageHoraire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heure_debut', models.TimeField()),
                ('heure_fin', models.TimeField()),
                ('jour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.jour')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plages_horaires', to='gestion.salon')),
            ],
            options={
                'unique_together': {('salon', 'jour', 'heure_debut', 'heure_fin')},
            },
        ),
    ]

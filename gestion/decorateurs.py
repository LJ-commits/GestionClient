# GestionClient/gestion/decorateurs.py

from functools import wraps

from django.contrib import messages
from django.shortcuts import redirect

# Importe le mod√®le Utilisateur pour pouvoir acc√©der √† son champ 'role'
# (M√™me si on a d√©j√† mis des propri√©t√©s dans le mod√®le, c'est une bonne pratique
# d'importer le mod√®le si tu utilises ses champs directement ici)
from gestion.models import Utilisateur


def est_professionnel(user):
    """
    V√©rifie si l'utilisateur est authentifi√© et est consid√©r√© comme un professionnel.
    Nous utilisons le champ 'is_staff' de Django pour cela.
    """
    return user.is_authenticated and user.is_staff


# --- D√âBUT MODIFICATION : AJOUT DE LA FONCTION POUR LE R√îLE '√âL√àVE' ---
def est_eleve(user):
    """
    V√©rifie si l'utilisateur est authentifi√© et a le r√¥le 'eleve'.
    On s'assure que l'utilisateur a bien l'attribut 'role' (ce qui est le cas apr√®s notre migration).
    """
    return user.is_authenticated and hasattr(user, 'role') and user.role == 'eleve'


# --- FIN MODIFICATION ---


def professionnel_required(view_func):
    """
    D√©corateur pour s'assurer que l'utilisateur est un professionnel connect√©.
    """

    @wraps(view_func)
    def wrapper(request, *args, **kwargs):
        if not request.user.is_authenticated:
            messages.warning(request, "Veuillez vous connecter pour acc√©der √† cette page. üö´")
            return redirect('login')

        if not est_professionnel(request.user):
            messages.error(request, "Vous n'avez pas les permissions n√©cessaires pour acc√©der √† cette page. ‚õî")
            return redirect('home')
        return view_func(request, *args, **kwargs)

    return wrapper


# --- D√âBUT MODIFICATION : AJOUT DU NOUVEAU D√âCORATEUR POUR √âL√àVE OU PROFESSIONNEL ---
def eleve_or_professionnel_required(view_func):
    """
    D√©corateur pour s'assurer que l'utilisateur est un √©l√®ve OU un professionnel connect√©.
    """

    @wraps(view_func)
    def wrapper(request, *args, **kwargs):
        if not request.user.is_authenticated:
            messages.warning(request, "Veuillez vous connecter pour acc√©der √† cette page. üö´")
            return redirect('login')

        # V√©rifie si l'utilisateur est soit un professionnel, soit un √©l√®ve
        if not (est_professionnel(request.user) or est_eleve(request.user)):
            messages.error(request, "Vous n'avez pas les permissions n√©cessaires pour acc√©der √† cette page. ‚õî")
            return redirect('home')  # Redirige vers la page d'accueil si ni pro ni √©l√®ve
        return view_func(request, *args, **kwargs)

    return wrapper
